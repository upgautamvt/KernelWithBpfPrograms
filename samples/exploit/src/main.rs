#![no_std]
#![no_main]

extern crate rlibc;
use core::panic::PanicInfo;

pub mod stub;

fn prepare_kernel_cred() -> *const () {
    let ptr = stub::STUB_PREPARE_KERNEL_CRED as *const ();
    let code: extern "C" fn(u64) -> *const () = unsafe { core::mem::transmute(ptr) };
    code(0)
}

fn commit_creds(new: *const ()) -> u32 {
    let ptr = stub::STUB_COMMIT_CREDS as *const ();
    let code: extern "C" fn(*const ()) -> u32 = unsafe { core::mem::transmute(ptr) };
    code(new)
}

#[no_mangle]
#[link_section = "tracepoint/"]
pub extern "C" fn _start() -> i32 {
    commit_creds(prepare_kernel_cred());
    return 0;
}

// This function is called on panic.
#[panic_handler]
fn panic(_info: &PanicInfo) -> ! {
    loop {}
}
